// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// NotifierMock is a mock implementation of notify.Notifier.
//
//	func TestSomethingThatUsesNotifier(t *testing.T) {
//
//		// make and configure a mocked notify.Notifier
//		mockedNotifier := &NotifierMock{
//			SchemaFunc: func() string {
//				panic("mock out the Schema method")
//			},
//			SendFunc: func(ctx context.Context, destination string, text string) error {
//				panic("mock out the Send method")
//			},
//			StringFunc: func() string {
//				panic("mock out the String method")
//			},
//		}
//
//		// use mockedNotifier in code that requires notify.Notifier
//		// and then make assertions.
//
//	}
type NotifierMock struct {
	// SchemaFunc mocks the Schema method.
	SchemaFunc func() string

	// SendFunc mocks the Send method.
	SendFunc func(ctx context.Context, destination string, text string) error

	// StringFunc mocks the String method.
	StringFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Schema holds details about calls to the Schema method.
		Schema []struct {
		}
		// Send holds details about calls to the Send method.
		Send []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Destination is the destination argument value.
			Destination string
			// Text is the text argument value.
			Text string
		}
		// String holds details about calls to the String method.
		String []struct {
		}
	}
	lockSchema sync.RWMutex
	lockSend   sync.RWMutex
	lockString sync.RWMutex
}

// Schema calls SchemaFunc.
func (mock *NotifierMock) Schema() string {
	if mock.SchemaFunc == nil {
		panic("NotifierMock.SchemaFunc: method is nil but Notifier.Schema was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSchema.Lock()
	mock.calls.Schema = append(mock.calls.Schema, callInfo)
	mock.lockSchema.Unlock()
	return mock.SchemaFunc()
}

// SchemaCalls gets all the calls that were made to Schema.
// Check the length with:
//
//	len(mockedNotifier.SchemaCalls())
func (mock *NotifierMock) SchemaCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSchema.RLock()
	calls = mock.calls.Schema
	mock.lockSchema.RUnlock()
	return calls
}

// Send calls SendFunc.
func (mock *NotifierMock) Send(ctx context.Context, destination string, text string) error {
	if mock.SendFunc == nil {
		panic("NotifierMock.SendFunc: method is nil but Notifier.Send was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Destination string
		Text        string
	}{
		Ctx:         ctx,
		Destination: destination,
		Text:        text,
	}
	mock.lockSend.Lock()
	mock.calls.Send = append(mock.calls.Send, callInfo)
	mock.lockSend.Unlock()
	return mock.SendFunc(ctx, destination, text)
}

// SendCalls gets all the calls that were made to Send.
// Check the length with:
//
//	len(mockedNotifier.SendCalls())
func (mock *NotifierMock) SendCalls() []struct {
	Ctx         context.Context
	Destination string
	Text        string
} {
	var calls []struct {
		Ctx         context.Context
		Destination string
		Text        string
	}
	mock.lockSend.RLock()
	calls = mock.calls.Send
	mock.lockSend.RUnlock()
	return calls
}

// String calls StringFunc.
func (mock *NotifierMock) String() string {
	if mock.StringFunc == nil {
		panic("NotifierMock.StringFunc: method is nil but Notifier.String was just called")
	}
	callInfo := struct {
	}{}
	mock.lockString.Lock()
	mock.calls.String = append(mock.calls.String, callInfo)
	mock.lockString.Unlock()
	return mock.StringFunc()
}

// StringCalls gets all the calls that were made to String.
// Check the length with:
//
//	len(mockedNotifier.StringCalls())
func (mock *NotifierMock) StringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockString.RLock()
	calls = mock.calls.String
	mock.lockString.RUnlock()
	return calls
}
