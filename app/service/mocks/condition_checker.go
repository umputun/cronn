// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/umputun/cronn/app/crontab"
)

// ConditionCheckerMock is a mock implementation of service.ConditionChecker.
//
//	func TestSomethingThatUsesConditionChecker(t *testing.T) {
//
//		// make and configure a mocked service.ConditionChecker
//		mockedConditionChecker := &ConditionCheckerMock{
//			CheckFunc: func(conditions crontab.ConditionsConfig) (bool, string) {
//				panic("mock out the Check method")
//			},
//		}
//
//		// use mockedConditionChecker in code that requires service.ConditionChecker
//		// and then make assertions.
//
//	}
type ConditionCheckerMock struct {
	// CheckFunc mocks the Check method.
	CheckFunc func(conditions crontab.ConditionsConfig) (bool, string)

	// calls tracks calls to the methods.
	calls struct {
		// Check holds details about calls to the Check method.
		Check []struct {
			// Conditions is the conditions argument value.
			Conditions crontab.ConditionsConfig
		}
	}
	lockCheck sync.RWMutex
}

// Check calls CheckFunc.
func (mock *ConditionCheckerMock) Check(conditions crontab.ConditionsConfig) (bool, string) {
	if mock.CheckFunc == nil {
		panic("ConditionCheckerMock.CheckFunc: method is nil but ConditionChecker.Check was just called")
	}
	callInfo := struct {
		Conditions crontab.ConditionsConfig
	}{
		Conditions: conditions,
	}
	mock.lockCheck.Lock()
	mock.calls.Check = append(mock.calls.Check, callInfo)
	mock.lockCheck.Unlock()
	return mock.CheckFunc(conditions)
}

// CheckCalls gets all the calls that were made to Check.
// Check the length with:
//
//	len(mockedConditionChecker.CheckCalls())
func (mock *ConditionCheckerMock) CheckCalls() []struct {
	Conditions crontab.ConditionsConfig
} {
	var calls []struct {
		Conditions crontab.ConditionsConfig
	}
	mock.lockCheck.RLock()
	calls = mock.calls.Check
	mock.lockCheck.RUnlock()
	return calls
}
