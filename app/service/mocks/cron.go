// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"

	"github.com/robfig/cron/v3"
)

// CronMock is a mock implementation of service.Cron.
//
// 	func TestSomethingThatUsesCron(t *testing.T) {
//
// 		// make and configure a mocked service.Cron
// 		mockedCron := &CronMock{
// 			EntriesFunc: func() []cron.Entry {
// 				panic("mock out the Entries method")
// 			},
// 			RemoveFunc: func(id cron.EntryID)  {
// 				panic("mock out the Remove method")
// 			},
// 			ScheduleFunc: func(schedule cron.Schedule, cmd cron.Job) cron.EntryID {
// 				panic("mock out the Schedule method")
// 			},
// 			StartFunc: func()  {
// 				panic("mock out the Start method")
// 			},
// 			StopFunc: func() context.Context {
// 				panic("mock out the Stop method")
// 			},
// 		}
//
// 		// use mockedCron in code that requires service.Cron
// 		// and then make assertions.
//
// 	}
type CronMock struct {
	// EntriesFunc mocks the Entries method.
	EntriesFunc func() []cron.Entry

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(id cron.EntryID)

	// ScheduleFunc mocks the Schedule method.
	ScheduleFunc func(schedule cron.Schedule, cmd cron.Job) cron.EntryID

	// StartFunc mocks the Start method.
	StartFunc func()

	// StopFunc mocks the Stop method.
	StopFunc func() context.Context

	// calls tracks calls to the methods.
	calls struct {
		// Entries holds details about calls to the Entries method.
		Entries []struct {
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// ID is the id argument value.
			ID cron.EntryID
		}
		// Schedule holds details about calls to the Schedule method.
		Schedule []struct {
			// Schedule is the schedule argument value.
			Schedule cron.Schedule
			// Cmd is the cmd argument value.
			Cmd cron.Job
		}
		// Start holds details about calls to the Start method.
		Start []struct {
		}
		// Stop holds details about calls to the Stop method.
		Stop []struct {
		}
	}
	lockEntries  sync.RWMutex
	lockRemove   sync.RWMutex
	lockSchedule sync.RWMutex
	lockStart    sync.RWMutex
	lockStop     sync.RWMutex
}

// Entries calls EntriesFunc.
func (mock *CronMock) Entries() []cron.Entry {
	if mock.EntriesFunc == nil {
		panic("CronMock.EntriesFunc: method is nil but Cron.Entries was just called")
	}
	callInfo := struct {
	}{}
	mock.lockEntries.Lock()
	mock.calls.Entries = append(mock.calls.Entries, callInfo)
	mock.lockEntries.Unlock()
	return mock.EntriesFunc()
}

// EntriesCalls gets all the calls that were made to Entries.
// Check the length with:
//     len(mockedCron.EntriesCalls())
func (mock *CronMock) EntriesCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockEntries.RLock()
	calls = mock.calls.Entries
	mock.lockEntries.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *CronMock) Remove(id cron.EntryID) {
	if mock.RemoveFunc == nil {
		panic("CronMock.RemoveFunc: method is nil but Cron.Remove was just called")
	}
	callInfo := struct {
		ID cron.EntryID
	}{
		ID: id,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	mock.RemoveFunc(id)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedCron.RemoveCalls())
func (mock *CronMock) RemoveCalls() []struct {
	ID cron.EntryID
} {
	var calls []struct {
		ID cron.EntryID
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Schedule calls ScheduleFunc.
func (mock *CronMock) Schedule(schedule cron.Schedule, cmd cron.Job) cron.EntryID {
	if mock.ScheduleFunc == nil {
		panic("CronMock.ScheduleFunc: method is nil but Cron.Schedule was just called")
	}
	callInfo := struct {
		Schedule cron.Schedule
		Cmd      cron.Job
	}{
		Schedule: schedule,
		Cmd:      cmd,
	}
	mock.lockSchedule.Lock()
	mock.calls.Schedule = append(mock.calls.Schedule, callInfo)
	mock.lockSchedule.Unlock()
	return mock.ScheduleFunc(schedule, cmd)
}

// ScheduleCalls gets all the calls that were made to Schedule.
// Check the length with:
//     len(mockedCron.ScheduleCalls())
func (mock *CronMock) ScheduleCalls() []struct {
	Schedule cron.Schedule
	Cmd      cron.Job
} {
	var calls []struct {
		Schedule cron.Schedule
		Cmd      cron.Job
	}
	mock.lockSchedule.RLock()
	calls = mock.calls.Schedule
	mock.lockSchedule.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *CronMock) Start() {
	if mock.StartFunc == nil {
		panic("CronMock.StartFunc: method is nil but Cron.Start was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	mock.lockStart.Unlock()
	mock.StartFunc()
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedCron.StartCalls())
func (mock *CronMock) StartCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStart.RLock()
	calls = mock.calls.Start
	mock.lockStart.RUnlock()
	return calls
}

// Stop calls StopFunc.
func (mock *CronMock) Stop() context.Context {
	if mock.StopFunc == nil {
		panic("CronMock.StopFunc: method is nil but Cron.Stop was just called")
	}
	callInfo := struct {
	}{}
	mock.lockStop.Lock()
	mock.calls.Stop = append(mock.calls.Stop, callInfo)
	mock.lockStop.Unlock()
	return mock.StopFunc()
}

// StopCalls gets all the calls that were made to Stop.
// Check the length with:
//     len(mockedCron.StopCalls())
func (mock *CronMock) StopCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockStop.RLock()
	calls = mock.calls.Stop
	mock.lockStop.RUnlock()
	return calls
}
