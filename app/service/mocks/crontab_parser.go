// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	crontab "github.com/umputun/cronn/crontab"
)

// CrontabParser is an autogenerated mock type for the CrontabParser type
type CrontabParser struct {
	mock.Mock
}

// Changes provides a mock function with given fields: ctx
func (_m *CrontabParser) Changes(ctx context.Context) (<-chan []crontab.JobSpec, error) {
	ret := _m.Called(ctx)

	var r0 <-chan []crontab.JobSpec
	if rf, ok := ret.Get(0).(func(context.Context) <-chan []crontab.JobSpec); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan []crontab.JobSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *CrontabParser) List() ([]crontab.JobSpec, error) {
	ret := _m.Called()

	var r0 []crontab.JobSpec
	if rf, ok := ret.Get(0).(func() []crontab.JobSpec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]crontab.JobSpec)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// String provides a mock function with given fields:
func (_m *CrontabParser) String() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
