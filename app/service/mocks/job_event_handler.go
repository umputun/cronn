// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
	"time"
)

// JobEventHandlerMock is a mock implementation of service.JobEventHandler.
//
//	func TestSomethingThatUsesJobEventHandler(t *testing.T) {
//
//		// make and configure a mocked service.JobEventHandler
//		mockedJobEventHandler := &JobEventHandlerMock{
//			OnJobCompleteFunc: func(command string, schedule string, startTime time.Time, endTime time.Time, exitCode int, err error)  {
//				panic("mock out the OnJobComplete method")
//			},
//			OnJobStartFunc: func(command string, schedule string, startTime time.Time)  {
//				panic("mock out the OnJobStart method")
//			},
//		}
//
//		// use mockedJobEventHandler in code that requires service.JobEventHandler
//		// and then make assertions.
//
//	}
type JobEventHandlerMock struct {
	// OnJobCompleteFunc mocks the OnJobComplete method.
	OnJobCompleteFunc func(command string, schedule string, startTime time.Time, endTime time.Time, exitCode int, err error)

	// OnJobStartFunc mocks the OnJobStart method.
	OnJobStartFunc func(command string, schedule string, startTime time.Time)

	// calls tracks calls to the methods.
	calls struct {
		// OnJobComplete holds details about calls to the OnJobComplete method.
		OnJobComplete []struct {
			// Command is the command argument value.
			Command string
			// Schedule is the schedule argument value.
			Schedule string
			// StartTime is the startTime argument value.
			StartTime time.Time
			// EndTime is the endTime argument value.
			EndTime time.Time
			// ExitCode is the exitCode argument value.
			ExitCode int
			// Err is the err argument value.
			Err error
		}
		// OnJobStart holds details about calls to the OnJobStart method.
		OnJobStart []struct {
			// Command is the command argument value.
			Command string
			// Schedule is the schedule argument value.
			Schedule string
			// StartTime is the startTime argument value.
			StartTime time.Time
		}
	}
	lockOnJobComplete sync.RWMutex
	lockOnJobStart    sync.RWMutex
}

// OnJobComplete calls OnJobCompleteFunc.
func (mock *JobEventHandlerMock) OnJobComplete(command string, schedule string, startTime time.Time, endTime time.Time, exitCode int, err error) {
	if mock.OnJobCompleteFunc == nil {
		panic("JobEventHandlerMock.OnJobCompleteFunc: method is nil but JobEventHandler.OnJobComplete was just called")
	}
	callInfo := struct {
		Command   string
		Schedule  string
		StartTime time.Time
		EndTime   time.Time
		ExitCode  int
		Err       error
	}{
		Command:   command,
		Schedule:  schedule,
		StartTime: startTime,
		EndTime:   endTime,
		ExitCode:  exitCode,
		Err:       err,
	}
	mock.lockOnJobComplete.Lock()
	mock.calls.OnJobComplete = append(mock.calls.OnJobComplete, callInfo)
	mock.lockOnJobComplete.Unlock()
	mock.OnJobCompleteFunc(command, schedule, startTime, endTime, exitCode, err)
}

// OnJobCompleteCalls gets all the calls that were made to OnJobComplete.
// Check the length with:
//
//	len(mockedJobEventHandler.OnJobCompleteCalls())
func (mock *JobEventHandlerMock) OnJobCompleteCalls() []struct {
	Command   string
	Schedule  string
	StartTime time.Time
	EndTime   time.Time
	ExitCode  int
	Err       error
} {
	var calls []struct {
		Command   string
		Schedule  string
		StartTime time.Time
		EndTime   time.Time
		ExitCode  int
		Err       error
	}
	mock.lockOnJobComplete.RLock()
	calls = mock.calls.OnJobComplete
	mock.lockOnJobComplete.RUnlock()
	return calls
}

// OnJobStart calls OnJobStartFunc.
func (mock *JobEventHandlerMock) OnJobStart(command string, schedule string, startTime time.Time) {
	if mock.OnJobStartFunc == nil {
		panic("JobEventHandlerMock.OnJobStartFunc: method is nil but JobEventHandler.OnJobStart was just called")
	}
	callInfo := struct {
		Command   string
		Schedule  string
		StartTime time.Time
	}{
		Command:   command,
		Schedule:  schedule,
		StartTime: startTime,
	}
	mock.lockOnJobStart.Lock()
	mock.calls.OnJobStart = append(mock.calls.OnJobStart, callInfo)
	mock.lockOnJobStart.Unlock()
	mock.OnJobStartFunc(command, schedule, startTime)
}

// OnJobStartCalls gets all the calls that were made to OnJobStart.
// Check the length with:
//
//	len(mockedJobEventHandler.OnJobStartCalls())
func (mock *JobEventHandlerMock) OnJobStartCalls() []struct {
	Command   string
	Schedule  string
	StartTime time.Time
} {
	var calls []struct {
		Command   string
		Schedule  string
		StartTime time.Time
	}
	mock.lockOnJobStart.RLock()
	calls = mock.calls.OnJobStart
	mock.lockOnJobStart.RUnlock()
	return calls
}
