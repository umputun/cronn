// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"sync"
)

// RepeaterMock is a mock implementation of service.Repeater.
//
// 	func TestSomethingThatUsesRepeater(t *testing.T) {
//
// 		// make and configure a mocked service.Repeater
// 		mockedRepeater := &RepeaterMock{
// 			DoFunc: func(ctx context.Context, fun func() error, errors ...error) error {
// 				panic("mock out the Do method")
// 			},
// 		}
//
// 		// use mockedRepeater in code that requires service.Repeater
// 		// and then make assertions.
//
// 	}
type RepeaterMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, fun func() error, errors ...error) error

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Fun is the fun argument value.
			Fun func() error
			// Errors is the errors argument value.
			Errors []error
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *RepeaterMock) Do(ctx context.Context, fun func() error, errors ...error) error {
	if mock.DoFunc == nil {
		panic("RepeaterMock.DoFunc: method is nil but Repeater.Do was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Fun    func() error
		Errors []error
	}{
		Ctx:    ctx,
		Fun:    fun,
		Errors: errors,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, fun, errors...)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//     len(mockedRepeater.DoCalls())
func (mock *RepeaterMock) DoCalls() []struct {
	Ctx    context.Context
	Fun    func() error
	Errors []error
} {
	var calls []struct {
		Ctx    context.Context
		Fun    func() error
		Errors []error
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
