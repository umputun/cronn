// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"

	"github.com/umputun/cronn/app/resumer"
)

// ResumerMock is a mock implementation of service.Resumer.
//
// 	func TestSomethingThatUsesResumer(t *testing.T) {
//
// 		// make and configure a mocked service.Resumer
// 		mockedResumer := &ResumerMock{
// 			ListFunc: func() []resumer.Cmd {
// 				panic("mock out the List method")
// 			},
// 			OnFinishFunc: func(fname string) error {
// 				panic("mock out the OnFinish method")
// 			},
// 			OnStartFunc: func(cmd string) (string, error) {
// 				panic("mock out the OnStart method")
// 			},
// 			StringFunc: func() string {
// 				panic("mock out the String method")
// 			},
// 		}
//
// 		// use mockedResumer in code that requires service.Resumer
// 		// and then make assertions.
//
// 	}
type ResumerMock struct {
	// ListFunc mocks the List method.
	ListFunc func() []resumer.Cmd

	// OnFinishFunc mocks the OnFinish method.
	OnFinishFunc func(fname string) error

	// OnStartFunc mocks the OnStart method.
	OnStartFunc func(cmd string) (string, error)

	// StringFunc mocks the String method.
	StringFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
		}
		// OnFinish holds details about calls to the OnFinish method.
		OnFinish []struct {
			// Fname is the fname argument value.
			Fname string
		}
		// OnStart holds details about calls to the OnStart method.
		OnStart []struct {
			// Cmd is the cmd argument value.
			Cmd string
		}
		// String holds details about calls to the String method.
		String []struct {
		}
	}
	lockList     sync.RWMutex
	lockOnFinish sync.RWMutex
	lockOnStart  sync.RWMutex
	lockString   sync.RWMutex
}

// List calls ListFunc.
func (mock *ResumerMock) List() []resumer.Cmd {
	if mock.ListFunc == nil {
		panic("ResumerMock.ListFunc: method is nil but Resumer.List was just called")
	}
	callInfo := struct {
	}{}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc()
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedResumer.ListCalls())
func (mock *ResumerMock) ListCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// OnFinish calls OnFinishFunc.
func (mock *ResumerMock) OnFinish(fname string) error {
	if mock.OnFinishFunc == nil {
		panic("ResumerMock.OnFinishFunc: method is nil but Resumer.OnFinish was just called")
	}
	callInfo := struct {
		Fname string
	}{
		Fname: fname,
	}
	mock.lockOnFinish.Lock()
	mock.calls.OnFinish = append(mock.calls.OnFinish, callInfo)
	mock.lockOnFinish.Unlock()
	return mock.OnFinishFunc(fname)
}

// OnFinishCalls gets all the calls that were made to OnFinish.
// Check the length with:
//     len(mockedResumer.OnFinishCalls())
func (mock *ResumerMock) OnFinishCalls() []struct {
	Fname string
} {
	var calls []struct {
		Fname string
	}
	mock.lockOnFinish.RLock()
	calls = mock.calls.OnFinish
	mock.lockOnFinish.RUnlock()
	return calls
}

// OnStart calls OnStartFunc.
func (mock *ResumerMock) OnStart(cmd string) (string, error) {
	if mock.OnStartFunc == nil {
		panic("ResumerMock.OnStartFunc: method is nil but Resumer.OnStart was just called")
	}
	callInfo := struct {
		Cmd string
	}{
		Cmd: cmd,
	}
	mock.lockOnStart.Lock()
	mock.calls.OnStart = append(mock.calls.OnStart, callInfo)
	mock.lockOnStart.Unlock()
	return mock.OnStartFunc(cmd)
}

// OnStartCalls gets all the calls that were made to OnStart.
// Check the length with:
//     len(mockedResumer.OnStartCalls())
func (mock *ResumerMock) OnStartCalls() []struct {
	Cmd string
} {
	var calls []struct {
		Cmd string
	}
	mock.lockOnStart.RLock()
	calls = mock.calls.OnStart
	mock.lockOnStart.RUnlock()
	return calls
}

// String calls StringFunc.
func (mock *ResumerMock) String() string {
	if mock.StringFunc == nil {
		panic("ResumerMock.StringFunc: method is nil but Resumer.String was just called")
	}
	callInfo := struct {
	}{}
	mock.lockString.Lock()
	mock.calls.String = append(mock.calls.String, callInfo)
	mock.lockString.Unlock()
	return mock.StringFunc()
}

// StringCalls gets all the calls that were made to String.
// Check the length with:
//     len(mockedResumer.StringCalls())
func (mock *ResumerMock) StringCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockString.RLock()
	calls = mock.calls.String
	mock.lockString.RUnlock()
	return calls
}
