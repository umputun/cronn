// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
	"time"
)

// ScheduleMock is a mock implementation of service.Schedule.
//
// 	func TestSomethingThatUsesSchedule(t *testing.T) {
//
// 		// make and configure a mocked service.Schedule
// 		mockedSchedule := &ScheduleMock{
// 			NextFunc: func(timeMoqParam time.Time) time.Time {
// 				panic("mock out the Next method")
// 			},
// 		}
//
// 		// use mockedSchedule in code that requires service.Schedule
// 		// and then make assertions.
//
// 	}
type ScheduleMock struct {
	// NextFunc mocks the Next method.
	NextFunc func(timeMoqParam time.Time) time.Time

	// calls tracks calls to the methods.
	calls struct {
		// Next holds details about calls to the Next method.
		Next []struct {
			// TimeMoqParam is the timeMoqParam argument value.
			TimeMoqParam time.Time
		}
	}
	lockNext sync.RWMutex
}

// Next calls NextFunc.
func (mock *ScheduleMock) Next(timeMoqParam time.Time) time.Time {
	if mock.NextFunc == nil {
		panic("ScheduleMock.NextFunc: method is nil but Schedule.Next was just called")
	}
	callInfo := struct {
		TimeMoqParam time.Time
	}{
		TimeMoqParam: timeMoqParam,
	}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc(timeMoqParam)
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//     len(mockedSchedule.NextCalls())
func (mock *ScheduleMock) NextCalls() []struct {
	TimeMoqParam time.Time
} {
	var calls []struct {
		TimeMoqParam time.Time
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}
