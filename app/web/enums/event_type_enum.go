// Code generated by enum generator; DO NOT EDIT.
package enums

import (
	"fmt"

	"database/sql/driver"
)

// EventType is the exported type for the enum
type EventType struct {
	name  string
	value int
}

func (e EventType) String() string { return e.name }

// Index returns the underlying integer value
func (e EventType) Index() int { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e EventType) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *EventType) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseEventType(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e EventType) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *EventType) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range EventTypeValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into EventType: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid eventType value: %v", value)
		}
	}

	val, err := ParseEventType(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// _eventTypeParseMap is used for efficient string to enum conversion
var _eventTypeParseMap = map[string]EventType{
	"started":   EventTypeStarted,
	"completed": EventTypeCompleted,
	"failed":    EventTypeFailed,
}

// ParseEventType converts string to eventType enum value
func ParseEventType(v string) (EventType, error) {

	if val, ok := _eventTypeParseMap[v]; ok {
		return val, nil
	}

	return EventType{}, fmt.Errorf("invalid eventType: %s", v)
}

// MustEventType is like ParseEventType but panics if string is invalid
func MustEventType(v string) EventType {
	r, err := ParseEventType(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for eventType values
var (
	EventTypeStarted   = EventType{name: "started", value: 0}
	EventTypeCompleted = EventType{name: "completed", value: 1}
	EventTypeFailed    = EventType{name: "failed", value: 2}
)

// EventTypeValues contains all possible enum values
var EventTypeValues = []EventType{
	EventTypeStarted,
	EventTypeCompleted,
	EventTypeFailed,
}

// EventTypeNames contains all possible enum names
var EventTypeNames = []string{
	"started",
	"completed",
	"failed",
}

// EventTypeIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all EventType values in declaration order. Example:
//
//	for v := range EventTypeIter() {
//	    // use v
//	}
func EventTypeIter() func(yield func(EventType) bool) {
	return func(yield func(EventType) bool) {
		for _, v := range EventTypeValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ eventType = eventType(0)
	// This avoids "defined but not used" linter error for eventTypeStarted
	var _ eventType = eventTypeStarted
	// This avoids "defined but not used" linter error for eventTypeCompleted
	var _ eventType = eventTypeCompleted
	// This avoids "defined but not used" linter error for eventTypeFailed
	var _ eventType = eventTypeFailed
	return true
}()
