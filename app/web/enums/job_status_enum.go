// Code generated by enum generator; DO NOT EDIT.
package enums

import (
	"fmt"

	"database/sql/driver"
)

// JobStatus is the exported type for the enum
type JobStatus struct {
	name  string
	value int
}

func (e JobStatus) String() string { return e.name }

// Index returns the underlying integer value
func (e JobStatus) Index() int { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e JobStatus) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *JobStatus) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseJobStatus(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e JobStatus) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *JobStatus) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range JobStatusValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into JobStatus: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid jobStatus value: %v", value)
		}
	}

	val, err := ParseJobStatus(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// _jobStatusParseMap is used for efficient string to enum conversion
var _jobStatusParseMap = map[string]JobStatus{
	"idle":    JobStatusIdle,
	"running": JobStatusRunning,
	"success": JobStatusSuccess,
	"failed":  JobStatusFailed,
}

// ParseJobStatus converts string to jobStatus enum value
func ParseJobStatus(v string) (JobStatus, error) {

	if val, ok := _jobStatusParseMap[v]; ok {
		return val, nil
	}

	return JobStatus{}, fmt.Errorf("invalid jobStatus: %s", v)
}

// MustJobStatus is like ParseJobStatus but panics if string is invalid
func MustJobStatus(v string) JobStatus {
	r, err := ParseJobStatus(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for jobStatus values
var (
	JobStatusIdle    = JobStatus{name: "idle", value: 0}
	JobStatusRunning = JobStatus{name: "running", value: 1}
	JobStatusSuccess = JobStatus{name: "success", value: 2}
	JobStatusFailed  = JobStatus{name: "failed", value: 3}
)

// JobStatusValues contains all possible enum values
var JobStatusValues = []JobStatus{
	JobStatusIdle,
	JobStatusRunning,
	JobStatusSuccess,
	JobStatusFailed,
}

// JobStatusNames contains all possible enum names
var JobStatusNames = []string{
	"idle",
	"running",
	"success",
	"failed",
}

// JobStatusIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all JobStatus values in declaration order. Example:
//
//	for v := range JobStatusIter() {
//	    // use v
//	}
func JobStatusIter() func(yield func(JobStatus) bool) {
	return func(yield func(JobStatus) bool) {
		for _, v := range JobStatusValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ jobStatus = jobStatus(0)
	// This avoids "defined but not used" linter error for jobStatusIdle
	var _ jobStatus = jobStatusIdle
	// This avoids "defined but not used" linter error for jobStatusRunning
	var _ jobStatus = jobStatusRunning
	// This avoids "defined but not used" linter error for jobStatusSuccess
	var _ jobStatus = jobStatusSuccess
	// This avoids "defined but not used" linter error for jobStatusFailed
	var _ jobStatus = jobStatusFailed
	return true
}()
