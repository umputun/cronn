// Code generated by enum generator; DO NOT EDIT.
package enums

import (
	"fmt"

	"database/sql/driver"
)

// SortMode is the exported type for the enum
type SortMode struct {
	name  string
	value int
}

func (e SortMode) String() string { return e.name }

// Index returns the underlying integer value
func (e SortMode) Index() int { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e SortMode) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *SortMode) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseSortMode(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e SortMode) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *SortMode) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range SortModeValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into SortMode: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid sortMode value: %v", value)
		}
	}

	val, err := ParseSortMode(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// _sortModeParseMap is used for efficient string to enum conversion
var _sortModeParseMap = map[string]SortMode{
	"default": SortModeDefault,
	"lastrun": SortModeLastrun,
	"nextrun": SortModeNextrun,
}

// ParseSortMode converts string to sortMode enum value
func ParseSortMode(v string) (SortMode, error) {

	if val, ok := _sortModeParseMap[v]; ok {
		return val, nil
	}

	return SortMode{}, fmt.Errorf("invalid sortMode: %s", v)
}

// MustSortMode is like ParseSortMode but panics if string is invalid
func MustSortMode(v string) SortMode {
	r, err := ParseSortMode(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for sortMode values
var (
	SortModeDefault = SortMode{name: "default", value: 0}
	SortModeLastrun = SortMode{name: "lastrun", value: 1}
	SortModeNextrun = SortMode{name: "nextrun", value: 2}
)

// SortModeValues contains all possible enum values
var SortModeValues = []SortMode{
	SortModeDefault,
	SortModeLastrun,
	SortModeNextrun,
}

// SortModeNames contains all possible enum names
var SortModeNames = []string{
	"default",
	"lastrun",
	"nextrun",
}

// SortModeIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all SortMode values in declaration order. Example:
//
//	for v := range SortModeIter() {
//	    // use v
//	}
func SortModeIter() func(yield func(SortMode) bool) {
	return func(yield func(SortMode) bool) {
		for _, v := range SortModeValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ sortMode = sortMode(0)
	// This avoids "defined but not used" linter error for sortModeDefault
	var _ sortMode = sortModeDefault
	// This avoids "defined but not used" linter error for sortModeLastrun
	var _ sortMode = sortModeLastrun
	// This avoids "defined but not used" linter error for sortModeNextrun
	var _ sortMode = sortModeNextrun
	return true
}()
