// Code generated by enum generator; DO NOT EDIT.
package enums

import (
	"fmt"

	"database/sql/driver"
)

// Theme is the exported type for the enum
type Theme struct {
	name  string
	value int
}

func (e Theme) String() string { return e.name }

// Index returns the underlying integer value
func (e Theme) Index() int { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e Theme) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *Theme) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseTheme(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e Theme) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *Theme) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range ThemeValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into Theme: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid theme value: %v", value)
		}
	}

	val, err := ParseTheme(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// _themeParseMap is used for efficient string to enum conversion
var _themeParseMap = map[string]Theme{
	"light": ThemeLight,
	"dark":  ThemeDark,
	"auto":  ThemeAuto,
}

// ParseTheme converts string to theme enum value
func ParseTheme(v string) (Theme, error) {

	if val, ok := _themeParseMap[v]; ok {
		return val, nil
	}

	return Theme{}, fmt.Errorf("invalid theme: %s", v)
}

// MustTheme is like ParseTheme but panics if string is invalid
func MustTheme(v string) Theme {
	r, err := ParseTheme(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for theme values
var (
	ThemeLight = Theme{name: "light", value: 0}
	ThemeDark  = Theme{name: "dark", value: 1}
	ThemeAuto  = Theme{name: "auto", value: 2}
)

// ThemeValues contains all possible enum values
var ThemeValues = []Theme{
	ThemeLight,
	ThemeDark,
	ThemeAuto,
}

// ThemeNames contains all possible enum names
var ThemeNames = []string{
	"light",
	"dark",
	"auto",
}

// ThemeIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all Theme values in declaration order. Example:
//
//	for v := range ThemeIter() {
//	    // use v
//	}
func ThemeIter() func(yield func(Theme) bool) {
	return func(yield func(Theme) bool) {
		for _, v := range ThemeValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ theme = theme(0)
	// This avoids "defined but not used" linter error for themeLight
	var _ theme = themeLight
	// This avoids "defined but not used" linter error for themeDark
	var _ theme = themeDark
	// This avoids "defined but not used" linter error for themeAuto
	var _ theme = themeAuto
	return true
}()
