// Code generated by enum generator; DO NOT EDIT.
package enums

import (
	"fmt"

	"database/sql/driver"
)

// ViewMode is the exported type for the enum
type ViewMode struct {
	name  string
	value int
}

func (e ViewMode) String() string { return e.name }

// Index returns the underlying integer value
func (e ViewMode) Index() int { return e.value }

// MarshalText implements encoding.TextMarshaler
func (e ViewMode) MarshalText() ([]byte, error) {
	return []byte(e.name), nil
}

// UnmarshalText implements encoding.TextUnmarshaler
func (e *ViewMode) UnmarshalText(text []byte) error {
	var err error
	*e, err = ParseViewMode(string(text))
	return err
}

// Value implements the driver.Valuer interface
func (e ViewMode) Value() (driver.Value, error) {
	return e.name, nil
}

// Scan implements the sql.Scanner interface
func (e *ViewMode) Scan(value interface{}) error {
	if value == nil {
		// try to find zero value
		for _, v := range ViewModeValues {
			if v.Index() == 0 {
				*e = v
				return nil
			}
		}
		// no zero value found, return error
		return fmt.Errorf("cannot scan nil into ViewMode: no zero value defined")
	}

	str, ok := value.(string)
	if !ok {
		if b, ok := value.([]byte); ok {
			str = string(b)
		} else {
			return fmt.Errorf("invalid viewMode value: %v", value)
		}
	}

	val, err := ParseViewMode(str)
	if err != nil {
		return err
	}

	*e = val
	return nil
}

// _viewModeParseMap is used for efficient string to enum conversion
var _viewModeParseMap = map[string]ViewMode{
	"cards": ViewModeCards,
	"list":  ViewModeList,
}

// ParseViewMode converts string to viewMode enum value
func ParseViewMode(v string) (ViewMode, error) {

	if val, ok := _viewModeParseMap[v]; ok {
		return val, nil
	}

	return ViewMode{}, fmt.Errorf("invalid viewMode: %s", v)
}

// MustViewMode is like ParseViewMode but panics if string is invalid
func MustViewMode(v string) ViewMode {
	r, err := ParseViewMode(v)
	if err != nil {
		panic(err)
	}
	return r
}

// Public constants for viewMode values
var (
	ViewModeCards = ViewMode{name: "cards", value: 0}
	ViewModeList  = ViewMode{name: "list", value: 1}
)

// ViewModeValues contains all possible enum values
var ViewModeValues = []ViewMode{
	ViewModeCards,
	ViewModeList,
}

// ViewModeNames contains all possible enum names
var ViewModeNames = []string{
	"cards",
	"list",
}

// ViewModeIter returns a function compatible with Go 1.23's range-over-func syntax.
// It yields all ViewMode values in declaration order. Example:
//
//	for v := range ViewModeIter() {
//	    // use v
//	}
func ViewModeIter() func(yield func(ViewMode) bool) {
	return func(yield func(ViewMode) bool) {
		for _, v := range ViewModeValues {
			if !yield(v) {
				break
			}
		}
	}
}

// These variables are used to prevent the compiler from reporting unused errors
// for the original enum constants. They are intentionally placed in a var block
// that is compiled away by the Go compiler.
var _ = func() bool {
	var _ viewMode = viewMode(0)
	// This avoids "defined but not used" linter error for viewModeCards
	var _ viewMode = viewModeCards
	// This avoids "defined but not used" linter error for viewModeList
	var _ viewMode = viewModeList
	return true
}()
